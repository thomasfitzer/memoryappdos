{"version":3,"sources":["components/TeamCard/TeamCard.js","components/Nav/Nav.js","components/Wrapper/Wrapper.js","components/Title/Title.js","Container.js","App.js","serviceWorker.js","index.js"],"names":["TeamCard","props","react_default","a","createElement","className","value","id","onClick","handleClick","alt","name","src","image","Nav","href","title","rightWrong","score","topScore","Wrapper","children","Title","Container","concat","fluid","App","state","teams","currentScore","goodBad","clicked","_this","indexOf","handleIncrement","setState","handleReset","newScore","handleShuffle","shuffledTeams","array","i","length","j","Math","floor","random","_ref","shuffleTeams","_this2","this","components_Wrapper_Wrapper","components_Nav_Nav","components_Title_Title","src_Container","map","team","components_TeamCard_TeamCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9982a4da.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./TeamCard.css\";\n// Nothing too fancy here, just displays the team cards.\nconst TeamCard = props => (\n  <div \n    className=\"card\"\n    value={props.id}\n    onClick={() => props.handleClick(props.id)}\n    >\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n    \n    \n  </div>\n);\n\nexport default TeamCard;\n\n\n\n","import React from \"react\";\nimport \"./Nav.css\";\n// This displays the navbar at the top.\nconst Nav = props => (\n  <nav>\n    <ul>\n      <li className=\"brand animated lightSpeedIn\">\n        <a href=\"/clicky-game/\">{props.title}</a>\n      </li>\n\n      <li id=\"rw\">{props.rightWrong}</li>\n\n      <li id=\"cur-sco\">Current Score: {props.score}</li>\n\n      <li id=\"top-sco\">Top Score: {props.topScore}</li>\n    </ul>\n  </nav>\n);\n\nexport default Nav;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;","import React from \"react\";\n// This JS just helps with the display of the container.\nconst Container = props =>\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>;\n\nexport default Container;","import React, { Component } from 'react';\nimport TeamCard from \"./components/TeamCard\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Container from \"./Container\";\nimport teams from \"./teamlist.json\";\nimport './App.css';\n//Function to shuffle the images.\nfunction shuffleTeams(array) {\n    for (let i = array.length -1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i +1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n};\n\nclass App extends Component {\n    state = {\n        teams,\n        currentScore: 0,\n        topScore: 0,\n        goodBad: \"\",\n        clicked: []\n    };\n//Function to deal with the clicking of the mouse.\n    handleClick = id => {\n        if (this.state.clicked.indexOf(id) === -1) {\n            this.handleIncrement();\n            this.setState({ clicked: this.state.clicked.concat(id) });\n        } else {\n            this.handleReset();\n        }\n        \n    };\n    //Function to increase the score.\n    handleIncrement = () => {\n        const newScore = this.state.currentScore + 1;\n        this.setState({\n            currentScore: newScore,\n            goodBad: \"\"\n        });\n        if (newScore >= this.state.topScore) {\n            this.setState({ topScore: newScore });\n        } else if (newScore === 12) {\n            this.setState({goodBad: \"Hooray for everything, you won!\"});\n        }\n        this.handleShuffle();\n    };\n    //Function to reset the game when a player loses.\n    handleReset = () => {\n        this.setState({\n            currentScore: 0,\n            topScore: this.state.topScore,\n            goodBad: \"Zounds!\",\n            clicked: []\n        });\n        this.handleShuffle()\n    };\n//Shuffles the images\n    handleShuffle = () => {\n        let shuffledTeams = shuffleTeams(teams);\n        this.setState({ teams: shuffledTeams });\n    };\n//Actually renders the page.\n    render() {\n        return (\n            <Wrapper>\n                <Nav\n                title=\"Classic NHL Clicky Game\"\n                score={this.state.currentScore}\n                topScore={this.state.topScore}\n                goodBad={this.state.goodBad}\n                />\n\n                <Title>\n                    Click on each jersey, but don't click any duplicates!\n                </Title>\n\n                <Container>\n                    \n                        {this.state.teams.map(team => (\n                            //Louis helped me edit this so it would put the cards into rows.\n                            <TeamCard\n                            key={team.id}\n                            handleClick={this.handleClick}\n                            handleIncrement={this.handleIncrement}\n                            handleReset={this.handleReset}\n                            handleShuffle={this.handleShuffle}\n                            id={team.id}\n                            image={team.image}\n                            />\n                           \n                        ))}\n                    \n                </Container>\n\n\n            \n            </Wrapper>\n        )\n    }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}